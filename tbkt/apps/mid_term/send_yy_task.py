# coding: utf-8
import datetime
import logging
import time

from apps.mid_term.com_yy import com_paper, com_method
from apps.mid_term.com_yy import com_user as com_user_yy
from apps.mid_term.com_yy import com_yy as comyy
from apps.mid_term.com_yy import yy_common as usercom
from apps.mid_term.send_sx_task import send_sms_user_id
from apps.sx_terminal.send_task import get_unit_students
from libs.utils.thread_pool import call
from .common import get_text_content, get_ticket
from com import com_user, com_sys
from com.com_cache import cache
from com.com_user import need_login
from libs.utils import db, json
from libs.utils import sms, ajax_try
from libs.utils.ajax_json import jsonp_fail, jsonp_ok
from libs.utils.common import Struct

log = logging.getLogger('common.middleware')

# 教材对应的试卷 按照上面的版本顺序，和班级，卷的顺序， 一次向下递加
#press: test_id
BOOK_PAPER = {
    44: [101, 102, 103], # 人教三起点下
    300: [106, 107, 108],
    641: [111, 112, 113],
    642: [116, 117, 118],
    126: [121, 122, 123],# 外研三起点下
    305: [126, 127, 128],
    647: [131, 132, 133],
    648: [136, 137, 138],
    177: [141, 142, 143],# 湘鲁三起点下
    322: [146, 147, 148],
    998: [151, 152, 153],
    999: [156, 157, 158],
}

#试卷id对应的试卷名字
PAPER = {
    101: '提分试卷-卷(一)',
    102: '提分试卷-卷(二)',
    103: '提分试卷-卷(三)',
    106: '提分试卷-卷(一)',
    107: '提分试卷-卷(二)',
    108: '提分试卷-卷(三)',
    111: '提分试卷-卷(一)',
    112: '提分试卷-卷(二)',
    113: '提分试卷-卷(三)',
    116: '提分试卷-卷(一)',
    117: '提分试卷-卷(二)',
    118: '提分试卷-卷(三)',
    121: '提分试卷-卷(一)',
    122: '提分试卷-卷(二)',
    123: '提分试卷-卷(三)',
    126: '提分试卷-卷(一)',
    127: '提分试卷-卷(二)',
    128: '提分试卷-卷(三)',
    131: '提分试卷-卷(一)',
    132: '提分试卷-卷(二)',
    133: '提分试卷-卷(三)',
    136: '提分试卷-卷(一)',
    137: '提分试卷-卷(二)',
    138: '提分试卷-卷(三)',
    141: '提分试卷-卷(一)',
    142: '提分试卷-卷(二)',
    143: '提分试卷-卷(三)',
    146: '提分试卷-卷(一)',
    147: '提分试卷-卷(二)',
    148: '提分试卷-卷(三)',
    151: '提分试卷-卷(一)',
    152: '提分试卷-卷(二)',
    153: '提分试卷-卷(三)',
    156: '提分试卷-卷(一)',
    157: '提分试卷-卷(二)',
    158: '提分试卷-卷(三)',
    # 以下是期末试卷资源
159: '期末提分试卷--(一)',
    160: '期末提分试卷--(二)',
    161: '期末提分试卷--(三)',
    162: '期末提分试卷--(一)',
    163: '期末提分试卷--(二)',
    164: '期末提分试卷--(三)',
    165: '期末提分试卷--(一)',
    166: '期末提分试卷--(二)',
    167: '期末提分试卷--(三)',
    168: '期末提分试卷--(一)',
    169: '期末提分试卷--(二)',
    170: '期末提分试卷--(三)',
    171: '期末提分试卷--(一)',
    172: '期末提分试卷--(二)',
    173: '期末提分试卷--(三)',
    174: '期末提分试卷--(一)',
    175: '期末提分试卷--(二)',
    176: '期末提分试卷--(三)',
    177: '期末提分试卷--(一)',
    178: '期末提分试卷--(二)',
    179: '期末提分试卷--(三)',
    180: '期末提分试卷--(一)',
    181: '期末提分试卷--(二)',
    182: '期末提分试卷--(三)',
    183: '期末提分试卷--(一)',
    184: '期末提分试卷--(二)',
    185: '期末提分试卷--(三)',
    186: '期末提分试卷--(一)',
    187: '期末提分试卷--(二)',
    188: '期末提分试卷--(三)',
    189: '期末提分试卷--(一)',
    190: '期末提分试卷--(二)',
    191: '期末提分试卷--(三)',
    192: '期末提分试卷--(一)',
    193: '期末提分试卷--(二)',
    194: '期末提分试卷--(三)',

}

# 试卷对应的问题
#test_id: [question_id]
PAPER_QUESTION = {
# 人教下三起点期中试卷三年级
101:[22833, 23408, 15356, 22875, 17746, 20600, 8670, 6879, 6875, 23239, 1203, 488, 22740, 18409, 11827, 23161, 22774, 6922,6619,6912],
102:[21939,22831,15339,22835,6861,23028,20271,6874,1933,18105,1139,14144,18127,16880,11825,11793,22459,22768,23073,19442],
103:[17155,16058,18011,22049,21984,22865,8815,6863,1937,1932,17072,17627,18088,18728,11816,6857,5089,22746,6853,2563],

# 人教下三起点期中试卷四年级
106:[1549,1079,12516,7111,17270,7027,23188,14650,14832,10270,16137,21807,7016,7086,21036,8316,17976,12636,21261,9570],
107:[7099,857,7031,16231,7039,7028,7033,14641,10265,4204,14659,14834,7053,7078,17977,19673,17973,12137,9373,13049],
108:[793,803,7121,16073,7029,11039,6647,11178,7051,7063,11041,7061,7020,13649,9971,4729,9385,8845,11667,15256],

# 人教下三起点期中试卷五年级
111:[14852,9066,7199,7201,10310,9257,23248,11182,7141,8287,18381,22718,7153,13622,12694,10805,3773,9835,3923,9280],
112:[10314,7182,1607,9256,5941,7144,7142,9264,7147,4906,9142,7143,13417,7164,10048,5204,9791,7179,7162,7152],
113:[9422,9059,7187,7205,7188,7138,4772,9265,7146,9260,14312,9157,9262,15461,15292,22038,7155,7160,7161,23282],

# 人教下三起点期中试卷六年级
116:[10863,23254,6836,23255,9271,9266,9273,20094,6959,6822,23266,15294,10644,19740,20010,21354,19751,12855,12423,6823],
117:[6961,23256,6835,9274,9269,9277,9272,6839,23041,9276,6969,21104,11229,7001,19986,9278,21191,12670,8152,7006],
118:[1241,20008,6834,6840,9268,9267,6841,20080,19116,19654,10033,10626,13218,6999,21143,19707,20506,21154,10024,20702],

# :外研下三起点期中试卷三年级
121:[9288,16802,9201,18356,7224,19528,7249,2160,7288,7262,19356,7274,21480,9871,9847,9147,9858,9923,9893,9284],
122:[22821,7294,7342,18351,7246,19529,7226,23156,3256,7287,23164,7286,21477,9862,7529,9865,9904,9286,20964,11676],
123:[21419,7355,17267,7248,7222,6630,19526,11828,7256,7255,7273,7250,20511,9878,9849,9872,9903,15994,15149,9917],

# :外研下三起点期中试卷四年级
126:[17697,17528,1281,20012,7382,23171,7379,20013,7540,7494,22029,22168,22140,15221,11744,22413,11818,11824,22409,23190],
127:[7460,17076,21914,7441,10463,23172,13240,11088,7538,16612,22480,7487,22166,11668,13472,11763,15545,22420,11811,2140],
128:[16849,10157,21741,7477,7372,20011,7371,23178,7537,21482,22146,7534,22171,11669,11631,21281,11919,9294,11912,17998],

# :外研下三起点期中试卷五年级
131:[20131,12621,7358,7364,7415,20120,7421,7395,15763,7464,7488,7493,12483,12487,12587,12531,11828,9303,9302,9318],
132:[19625,12613,7305,7352,7434,13492,7447,7390,15737,7471,7490,7499,12485,12488,12567,12589,12626,12690,9305,7457],
133:[15951,12615,7329,7328,7448,13346,7385,7400,7528,19142,7497,7501,12486,12493,12517,12497,9301,5107,9307,12595],

# :外研下三起点期中试卷六年级
136:[18223,18989,20014,7581,7605,21295,7606,7653,7656,7669,19868,21392,13043,12966,12980,13088,13093,13002,13172,9320],
137:[7564,6706,18950,7547,11702,21268,7607,21272,7654,7657,7666,7674,12948,12971,21712,13090,21508,13133,13139,7587],
138:[7549,21215,7561,7578,7639,7631,7611,7596,7658,7688,7691,12952,12960,12975,13101,13091,23257,13135,13142,7641],

# :湘鲁下三起点期末试卷三年级
141:[8664,8670,16841,8662,18126,8810,8726,15489,8754,8776,11133,8816,9512,18715,9538,9532,9851,9848,9559,6794],
142:[1418,15563,8674,17531,18124,8752,18088,603,8759,8789,1850,23270,9526,15567,9518,9510,9884,9560,9557,3218],
143:[ 7797,13979,18204,8692,8705,8728,8751,16869,8757,8755,8799,4218,9523,10191,9533,21446,9554,9568,9328,9585],

# :湘鲁下三起点期末试卷四年级
146:[8844,8901,8824,17871,15930,4977,8939,22141,2375,6224,12656,21036,9359,9101,8859,15471,9419,22877,9421,9551],
147:[22885,16646,17976,17858,5624,20623,17895,17909,12242,22793,17777,11672,9383,9357,3122,9367,22837,10356,9003,23548],
148:[8909,8846,8821,17853,5754,16616,19195,8983,11150,9041,21745,9020,9130,17977,9352,9354,6701,9445,9422,9550],

# :湘鲁下三起点期末试卷五年级
151:[8870,8886,5963,23186,15084,8991,9011,9322,9059,11621,11178,9089,12250,12255,12233,9408,12241,12319,14571,9571],
152:[8943,15166,8868,8900,9014,8878,8999,9321,9065,10270,14906,9076,9397,12229,9400,12265,9227,17038,12437,9573],
153:[9069,8938,8896,8880,6647,8985,9016,20779,5900,14852,7986,9087,9403,9406,9407,12258,9247,12310,9423,9575],

# :湘鲁下三起点期末试卷六年级
156:[9162,9129,9132,9323,9167,9171,9172,9196,9228,9243,9238,9245,13215,13229,13254,13197,13401,13410,13421,7152],
157:[9161,20501,19673,9133,9168,9175,13850,9179,9225,9229,9239,9246,9450,13243,13247,13257,13395,9486,9474,9616],
158:[9134,9127,9136,10002,9170,9174,9178,12725,9214,21354,9241,9249,13217,13223,13190,13232,13390,13416,13419,23282],

    # 以下是期末试卷的资源
    159: [4832, 9728, 9744, 9754, 9762, 9772, 10914, 10915, 10917, 10918, 10922, 10933, 10944, 10954, 10957, 11372,
          18785, 18802, 18931, 18963],
    160: [174, 3878, 4873, 9512, 9709, 9727, 9746, 9761, 9862, 9864, 10878, 10906, 10919, 10931, 10937, 13393, 17859,
          18810, 19051, 22073],
    161: [3213, 4185, 7268, 8233, 9557, 9726, 9752, 9759, 9861, 10283, 10886, 10907, 10934, 10936, 11486, 18641, 18715,
          21443, 22078, 22946],

    # 人教下三起点期中试卷四年级
    162: [175, 3758, 6309, 6697, 9701, 10970, 10976, 11027, 11056, 11065, 11079, 11141, 13848, 14831, 17810, 18928,
          18990, 22295, 22878, 24082],
    163: [3849, 4480, 5689, 7087, 7876, 9649, 9669, 9697, 10076, 10237, 10975, 10982, 10985, 11007, 11053, 11062,
          11063, 14816, 23706, 23893],
    164: [4490, 7388, 7833, 7874, 8947, 9668, 9680, 9683, 9696, 9698, 10977, 10995, 11005, 11028, 11061, 11083,
          14080, 15637, 18425, 20854],

    # 人教下三起点期中试卷五年级
    165: [2331, 4961, 7156, 9811, 9836, 9836, 9845, 11015, 11097, 11101, 11105, 11119, 11148, 11158, 11168, 11182,
          12510, 16614, 21229, 21362],
    166: [5235, 6715, 8162, 9834, 9835, 9843, 10971, 11092, 11120, 11141, 11149, 11166, 11191, 11192, 14082, 15601,
          17289, 21199, 23222, 23363],
    167: [1264, 2375, 3786, 9792, 9804, 9817, 9830, 10969, 11090, 11096, 11099, 11100, 11157, 11159, 11167, 11171,
          11188, 12775, 19288, 23174],

    # 人教下三起点期中试卷六年级
    168: [5871, 7373, 11205, 11221, 11234, 11240, 11241, 11266, 11267, 11270, 11280, 11284, 12144, 15881, 19700, 21201,
          21203, 23348, 23351, 23648],
    169: [4547, 6534, 11214, 11218, 11227, 11236, 11238, 11268, 11271, 11275, 11279, 11286, 11287, 13379, 15127, 19702,
          20623, 22267, 23342, 23344],
    170: [3927, 7358, 11213, 11215, 11217, 11219, 11228, 11232, 11269, 11272, 11278, 11282, 11285, 19625, 19681, 19756,
          21283, 21629, 23108, 23651],

    # :外研下三起点期中试卷三年级
    171: [9754, 9938, 9962, 9968, 9972, 9984, 9997, 10116, 10121, 10131, 10154, 11398, 11509, 11538, 13821, 14929,
          18684, 20345, 23545, 24057],
    172: [3343, 6702, 9559, 9940, 9942, 9944, 9971, 9973, 9989, 9995, 10115, 10129, 10153, 10160, 11433, 11447,
          11504, 20781, 23547, 23567],
    173: [3342, 6700, 7873, 8202, 9557, 9937, 9941, 9988, 9996, 9998, 10006, 10147, 10152, 10158, 11501, 11506, 11548,
          11550, 17497, 23540],

    # :外研下三起点期中试卷四年级
    174: [10632, 11948, 11957, 11963, 11964, 12012, 12025, 12166, 12194, 12195, 12202, 12227, 12316, 12338, 12345,
          12347,
          12403, 12406, 12418, 20678],
    175: [11226, 11944, 11952, 12001, 12143, 12146, 12163, 12168, 12178, 12224, 12277, 12344, 12380, 12383, 12388,
          12396,
          12398, 12414, 19799, 23266],
    176: [11947, 12000, 12135, 12150, 12152, 12173, 12193, 12218, 12285, 12287, 12293, 12307, 12349, 12381, 12386,
          12421,
          12429, 12471, 19678, 21289],

    # :外研下三起点期中试卷五年级
    177: [10016, 12494, 12498, 12625, 12664, 12680, 12794, 12843, 12848, 12861, 12866, 12883, 12909, 12925, 12927,
          12938,
          12946, 13016, 17728, 23777],
    178: [10074, 10875, 12505, 12543, 12607, 12665, 12687, 12721, 12762, 12838, 12856, 12864, 12908, 12953, 12964,
          13024,
          13320, 15702, 23735, 23785],
    179: [11959, 12547, 12605, 12638, 12647, 12727, 12733, 12768, 12786, 12799, 12804, 12840, 12849, 12858, 12911,
          12944,
          13025, 13029, 14527, 21034],

    # :外研下三起点期中试卷六年级
    180: [9251, 13218, 13231, 13250, 13304, 13344, 13356, 13427, 13436, 13439, 13498, 13522, 13558, 13567, 13700, 13738,
          13744, 14908, 23084, 23462],
    181: [13237, 13264, 13296, 13302, 13350, 13368, 13420, 13422, 13430, 13476, 13507, 13525, 13526, 13693, 13741,
          13750,
          21560, 21629, 21761, 23265],
    182: [13209, 13214, 13246, 13280, 13314, 13315, 13349, 13429, 13449, 13477, 13482, 13484, 13511, 13528, 13680,
          13747,
          13749, 21747, 23654, 23794],

    # :湘鲁下三起点期末试卷三年级
    183: [6848, 9327, 9557, 9595, 9597, 9617, 9620, 9851, 11623, 11692, 11715, 11722, 11739, 11764, 11816, 21468, 22774,
          22832, 22842, 24087],
    184: [3732, 6855, 9578, 9583, 9596, 9598, 9609, 9624, 9779, 11621, 11636, 11698, 11720, 11723, 11749, 11827, 15506,
          15596, 18770, 18778],
    185: [7257, 8138, 8333, 9554, 9559, 9576, 9594, 9607, 9608, 9614, 9628, 11701, 11719, 11721, 11743, 11825, 11835,
          15941, 17860, 22214],

    # :湘鲁下三起点期末试卷四年级
    186: [287, 9477, 9505, 11083, 11928, 11930, 11933, 11987, 12002, 12138, 12141, 12142, 12144, 12149, 14819, 15471,
          16209, 21826, 22877, 23949],
    187: [267, 4313, 4482, 5100, 9363, 9475, 9503, 10355, 11905, 11998, 12033, 12042, 12075, 12079, 12148, 12164, 13591,
          14837, 20854, 21803],
    188: [4510, 9003, 9367, 9421, 9453, 9476, 9506, 11927, 11985, 12035, 12160, 12162, 12177, 13591, 14927, 16149,
          18989,
          19914, 22238, 23838],

    # :湘鲁下三起点期末试卷五年级
    189: [12603, 12604, 12616, 12627, 12659, 12661, 12683, 12708, 12725, 12815, 12860, 12873, 12929, 12959, 12967,
          12990,
          13057, 13115, 13170, 13177],
    190: [12523, 12584, 12584, 12606, 12688, 12705, 12719, 12800, 12850, 12863, 12871, 12930, 12961, 12974, 13014,
          13060,
          13122, 13173, 13179, 23993],
    191: [5577, 12516, 12610, 12695, 12701, 12741, 12743, 12827, 12857, 12865, 12886, 12936, 12939, 12963, 12972, 12985,
          13062, 13112, 13158, 13162],

    # :湘鲁下三起点期末试卷六年级
    192: [13480, 13548, 13583, 13603, 13610, 13620, 13645, 13659, 13670, 13674, 13676, 13753, 13761, 13789, 13798,
          13799,
          13822, 13848, 13889, 16985],
    193: [13502, 13518, 13541, 13612, 13622, 13634, 13642, 13672, 13698, 13702, 13706, 13735, 13748, 13758, 13762,
          13776,
          13807, 13809, 13832, 24193],
    194: [13486, 13501, 13504, 13593, 13614, 13615, 13623, 13652, 13669, 13682, 13709, 13724, 13745, 13754, 13764,
          13787,
          13797, 13806, 13825, 13829],

}






# PAPER_QUESTION = {
#     1: [8884, 3533, 6946, 6091, 6957, 7931, 6891, 5605, 7759, 8729,
#         6054, 6892, 1135, 6922, 9028, 6924, 3311, 6854, 7257, 3198],
#     2: [6937, 3526, 564, 427, 6950, 6099, 6934, 6929, 2466, 8912,
#         8710, 6879, 7870, 9074, 6871, 6913, 6842, 6618, 6846, 4391],
#     3: [6923, 6934, 93, 1277, 3133, 5604, 4081, 6948, 8815, 6874,
#         6892, 470, 6858, 6857, 4407, 6921, 4098, 8460, 6847, 4375],
#     4: [6929, 6936, 38, 1643, 5035, 1932, 567, 8670, 6050, 6941,
#         6871, 1917, 3423, 1140, 2159, 4406, 6912, 1720, 2789, 2796],
#     5: [8265, 5886, 6501, 91, 9209, 5541, 8722, 2101, 6939, 6926,
#         6863, 9238, 1432, 8734, 6845, 4390, 6853, 3257, 2732, 3552],
#     6: [8633, 8445, 1096, 8111, 7110, 8101, 8153, 7106, 6287, 9001,
#         5469, 1424, 2940, 3737, 7056, 7063, 7015, 8464, 8907, 7065],
#     7: [7108, 8450, 7758, 314, 7124, 8054, 5167, 5902, 7051, 7062,
#         3732, 7014, 7064, 6141, 8136, 8859, 9144, 7093, 7548, 7095],
#     8: [9140, 7099, 7121, 7101, 3514, 6647, 6656, 6728, 7114, 7047,
#         3736, 7048, 174, 6449, 7989, 7019, 7086, 8824, 9130, 7125],
#     9: [3520, 7031, 4042, 7030, 7026, 5503, 7041, 6271, 7050, 7052,
#         7017, 2433, 1269, 8474, 5418, 8316, 8845, 7084, 6301, 9279],
#     10: [833, 5299, 7111, 3517, 7039, 7033, 6727, 9096, 3721, 7007,
#          7049, 7053, 7016, 2323, 3305, 7088, 7639, 4729, 164, 9280],
#     11: [9096, 9078, 7187, 6714, 7610, 5369, 7204, 7144, 7143, 6887,
#          2601, 7175, 7902, 7517, 7156, 5010, 7179, 7159, 7166, 7152],
#     12: [9003, 8626, 1608, 1606, 9100, 5896, 5653, 7140, 9264, 7141,
#          7207, 7164, 6656, 2013, 7628, 3786, 3773, 4990, 7161, 7216],
#     13: [7188, 9253, 9059, 1607, 1618, 6713, 7142, 3724, 7138, 9259,
#          7146, 8470, 9261, 7155, 2064, 270, 1711, 6272, 5013, 9281],
#     14: [7185, 9066, 7199, 9256, 5982, 7196, 7466, 7188, 3387, 9257,
#          7142, 9265, 7147, 9260, 7153, 1884, 5073, 7183, 3773, 9282],
#     15: [7182, 9254, 7186, 9255, 1615, 7200, 7189, 9025, 9258, 7145,
#          8989, 9263, 1893, 5872, 6020, 3778, 7177, 4988, 4938, 9283],
#     16: [9178, 6967, 6963, 6965, 6964, 739, 6839, 6962, 6827, 5140,
#          3908, 9249, 7326, 7004, 9250, 1366, 8152, 6975, 8499, 1366],
#     17: [6961, 6836, 6832, 6431, 6840, 6658, 6959, 6826, 7003, 4554,
#          4051, 7980, 7005, 9240, 7990, 8558, 7985, 3440, 6974, 7006],
#     18: [2556, 6835, 4054, 6841, 9268, 9269, 6430, 1111, 6960, 6822,
#          6830, 7001, 6979, 6506, 9230, 8008, 3760, 6993, 6228, 6968],
#     19: [1241, 6834, 4814, 9271, 9276, 429, 9277, 9267, 9272, 6825,
#          6828, 6998, 3664, 2435, 6999, 7978, 8001, 2622, 6989, 682],
#     20: [1234, 6833, 9275, 9274, 6428, 9266, 9273, 6824, 6981, 9278,
#          6995, 1498, 6980, 7000, 7987, 2615, 2440, 6972, 3103, 6244],
#     21: [7293, 7353, 6139, 9201, 7761, 7249, 7283, 6160, 7257, 7460,
#          7779, 7288, 7286, 7258, 9198, 9026, 7939, 4452, 186, 5855],
#     22: [8390, 9287, 7359, 7339, 7342, 7224, 7226, 5719, 4391, 7228,
#          7287, 6402, 2347, 7274, 7251, 9173, 6703, 8007, 1847, 8716],
#     23: [8291, 6405, 7294, 3816, 7701, 7993, 6653, 7223, 2789, 7236,
#          7285, 2993, 7273, 9171, 4845, 9147, 2685, 4836, 1265, 9286],
#     24: [2184, 8897, 7260, 9185, 2550, 7864, 8256, 7246, 1437, 7250,
#          7284, 4548, 7266, 7262, 8726, 4832, 5962, 4861, 7871, 9284],
#     25: [9288, 7355, 7255, 3822, 7222, 2544, 7248, 2725, 2736, 7221,
#          7275, 7265, 3577, 7278, 2702, 7128, 4389, 5796, 4918, 9285],
#     26: [7462, 8722, 8747, 4139, 7468, 7382, 7374, 7874, 1231, 7541,
#          5855, 8524, 9146, 7531, 7503, 1880, 7668, 7854, 5941, 7478],
#     27: [7460, 7467, 4507, 7470, 7422, 7372, 7371, 7858, 7375, 7957,
#          5847, 8438, 7534, 6561, 7639, 9294, 8809, 7704, 7592, 7391],
#     28: [7445, 7439, 7443, 706, 7433, 6035, 7383, 7398, 7540, 3691,
#          8264, 7487, 7508, 7667, 7609, 9295, 9291, 7396, 698, 9316],
#     29: [7442, 6954, 5808, 7458, 1872, 7770, 7376, 7539, 5279, 8015,
#          2067, 5194, 1487, 7624, 7628, 2113, 9289, 2042, 9290, 9635],
#     30: [7441, 5718, 7472, 6723, 4391, 1939, 7713, 7538, 7357, 7127,
#          7514, 3297, 814, 5872, 2068, 8309, 9293, 7453, 7742, 9640],
#     31: [7999, 7326, 7345, 7329, 6996, 7361, 7302, 9143, 7395, 7356,
#          7405, 7528, 7475, 1053, 7511, 8904, 6519, 4375, 5134, 7377],
#     32: [7373, 5140, 7344, 7360, 7328, 7298, 9113, 7421, 6583, 7392,
#          7501, 2804, 7490, 8848, 6518, 4124, 3273, 7742, 8330, 7457],
#     33: [7358, 3101, 7340, 7327, 6258, 967, 9112, 7387, 5140, 7419,
#          7473, 7476, 7461, 7571, 8847, 6585, 9304, 9299, 9303, 7533],
#     34: [7305, 7352, 7338, 7326, 6257, 7299, 4197, 9150, 9045, 7370,
#          4045, 7447, 7469, 7901, 4142, 2651, 2789, 9302, 9307, 9317],
#     35: [9296, 7314, 1464, 7297, 7303, 9213, 8032, 7397, 6580, 9248,
#          7418, 9297, 7496, 7492, 7598, 9298, 9300, 2782, 9301, 9318],
#     36: [7586, 7580, 4511, 8664, 7582, 7585, 7565, 2821, 7668, 7636,
#          7640, 8907, 7633, 7683, 6797, 7688, 4209, 6614, 9309, 7587],
#     37: [7579, 7584, 4256, 5406, 7564, 7085, 7639, 7690, 5899, 8474,
#          7613, 7669, 2325, 6796, 4201, 9310, 6655, 9312, 9112, 7641],
#     38: [7554, 4871, 4479, 6405, 7561, 4336, 7637, 7631, 2014, 5864,
#          8458, 7600, 7654, 1295, 7677, 9313, 1301, 6676, 1207, 7694],
#     39: [7549, 4505, 2856, 1726, 7560, 7629, 7601, 7171, 2071, 7638,
#          7593, 7693, 7679, 7689, 4195, 9311, 9308, 7971, 9315, 9319],
#     40: [4876, 4478, 3876, 6707, 4329, 4863, 7608, 7602, 7635, 2089,
#          7628, 7662, 7652, 3789, 9314, 1298, 6613, 6287, 6286, 9320],
#     41: [8664, 5195, 8659, 8667, 2765, 8812, 6957, 8733, 6004, 8720,
#          8798, 8816, 8776, 8791, 2822, 2710, 1365, 5446, 4430, 3218],
#     42: [1418, 4098, 8808, 3994, 8687, 8662, 6954, 8708, 8724, 8752,
#          8716, 6948, 8797, 8789, 8799, 8708, 6509, 4872, 5460, 5420],
#     43: [6134, 8661, 8689, 7829, 561, 8674, 6941, 8814, 1140, 8731,
#          8722, 8699, 8759, 8795, 386, 7471, 6508, 8988, 8430, 9327],
#     44: [8671, 8686, 8695, 7822, 3695, 5541, 9242, 8750, 8728, 2157,
#          8758, 8773, 8788, 3500, 8766, 2702, 6502, 8987, 8233, 8234],
#     45: [9017, 8815, 7832, 8697, 5708, 8682, 6861, 4831, 9231, 8709,
#          8810, 8513, 8106, 8755, 8771, 2700, 314, 3335, 9328, 4196],
#     46: [8869, 8848, 8901, 8905, 8987, 9301, 8950, 8942, 9071, 9113,
#          8904, 5599, 9097, 9337, 9162, 7079, 6701, 2137, 9375, 9541],
#     47: [8849, 8909, 8846, 8948, 5474, 8091, 8941, 8992, 8961, 8989,
#          9112, 9114, 4589, 3495, 9013, 9159, 8845, 9358, 3722, 9546],
#     48: [8844, 8460, 8899, 5754, 9238, 5734, 5646, 8933, 8963, 7691,
#          9110, 6913, 9116, 9108, 9144, 9246, 7082, 9363, 2676, 9548],
#     49: [8843, 4403, 1854, 8859, 5380, 5752, 8984, 5645, 9028, 2342,
#          7018, 9018, 9111, 6639, 9130, 774, 8311, 9365, 3713, 9550],
#     50: [8819, 7640, 1510, 8845, 5624, 4285, 8951, 4279, 9027, 2323,
#          2346, 9109, 9047, 9098, 7129, 9338, 708, 9367, 2037, 9551],
#     51: [9069, 8878, 8949, 8920, 9014, 8888, 8985, 9007, 9065, 9093,
#          7185, 7052, 1259, 9062, 9063, 5171, 9078, 9397, 5924, 9570],
#     52: [8952, 6019, 6515, 1869, 6647, 4770, 8991, 9059, 9079, 7182,
#          7047, 9092, 9060, 8143, 9076, 9064, 9400, 9410, 9418, 9571],
#     53: [8943, 5984, 8880, 8924, 9321, 4763, 9011, 7186, 5228, 9096,
#          5902, 1266, 1242, 7013, 9089, 9087, 9403, 7951, 9423, 9573],
#     54: [8870, 8886, 5963, 8935, 9000, 2677, 9016, 5900, 6536, 3737,
#          9091, 7012, 4202, 1455, 8195, 9081, 9406, 9409, 5927, 9575],
#     55: [8938, 1138, 8896, 8865, 8887, 9322, 2659, 8999, 293, 6535,
#           1264, 9067, 2433, 2851, 9088, 897, 9407, 9408, 9247, 9577],
#     56: [9161, 9162, 9159, 8069, 1054, 8632, 7957, 9163, 9167, 9184,
#           9247, 9215, 9238, 9230, 9244, 7980, 9243, 5795, 9471, 9611],
#     57: [9134, 8845, 9144, 9145, 9158, 6300, 9173, 9175, 1883, 4510,
#          8038, 4745, 9219, 7314, 9247, 9240, 9229, 9486, 7175, 9616],
#     58: [9323, 9130, 9068, 8067, 9136, 9118, 3760, 9171, 9174, 4501,
#          9170, 5815, 7951, 7392, 8984, 9229, 9464, 9448, 9489, 9618],
#     59: [9127, 7077, 9146, 7018, 9129, 9154, 794, 8726, 9172, 4496,
#          9180, 9178, 7443, 7419, 9241, 8939, 7360, 9450, 7153, 9619],
#     60: [9132, 7129, 7514, 9165, 9133, 2633, 7471, 9201, 4491, 9179,
#          9248, 9251, 9239, 9213, 9228, 9458, 9474, 9478, 2857, 9623]
# }

WEEK_LIST = {1: '一', 2: '二', 3: '三', 4: '四', 5: '五', 6: '六', 0: '日'}            # 日期字典

@ajax_try({})
@need_login
def send_qzyy(request):
    """
    @api {post} /huodong/mid_term/yy/qzyy_web [期中提分试卷英语]教师发试卷
    @apiGroup mid_term
    @apiParamExample {json} 请求示例
       {{"type": 2,
       "unit_id": "622216,578298",
       "title": "试卷标题",
       "content": "短信内容",
       "begin_time": "2017-04-8 09:10:00",
       "end_time": "2017-04-9 23:59:59",
       "sendpwd": 0,
       "sendscope": 0, # 短信发送范围 0给所有学生发短信 1只给开通的学生发短信
       "ids":"1"            # 试卷id
       }
    @apiSuccessExample {json} 成功返回
       {
        "message": "",
        "next": "",
        "data": {
        "task_id": 71540        # 作业id
        },
        "response": "ok",
        "error": ""
        }
    @apiSuccessExample {json} 失败返回
       {"message": "", "error": "", "data": "", "response": "fail", "next": ""}
    """

    """
    功能说明：                发布期中英语试卷
    -----------------------------------------------
    修改人                    修改时间
    -----------------------------------------------
    张嘉麒                    2018-4-7
    """

    user = request.user
    grade_id = request.user.grade_id
    args = request.QUERY.casts(type=int, unit_id=str, title=unicode, content=unicode,
                               begin_time='timestamp', end_time='timestamp', sendpwd=int, sendscope=int, ids=str)
    type = args.type  # 1网上作业 2试卷作业 （本函数都是2）
    unit_id = args.unit_id or ''  # 班级id
    unit_ids = [int(s) for s in unit_id.split(',') if s]
    content = args.content or u''  # 短信内容
    now = int(time.time())  # 现在的时间
    begin_time = args.begin_time or now  # 发布时间
    end_time = args.end_time  # 完成时间
    sendpwd = args.sendpwd or 0  # 下发账号密码 0/1
    sendscope = args.sendscope or 0  # 短信发送范围 0给所有学生发短信 1只给开通的学生发短信
    ids = args.ids or ''
    ids = [int(id) for id in ids.split(',') if id]  # 试卷
    title = [s for s in args.title.split('|') if s]

    tea_name = db.tbkt_user_slave.auth_user.select('real_name').get(id=user.id)
    tea_name = tea_name.real_name
    open_content = get_text_content(content, sendscope, grade_id, tea_name, end_time, subject_id=91)
    logging.error(open_content)

    if not ids:
        return jsonp_fail(request, message='请选择试卷')
    if not type and type != 2:
        return jsonp_fail(request, message='作业类型不能为空')

    if not unit_id:
        return jsonp_fail(request, message='请选择您要发布的班级')

    if not content:
        return jsonp_fail(request, message='短信内容不能为空')

    if len(content) > 200:
        return jsonp_fail(request, message='短信内容不能超过200字')

    if not end_time:
        return jsonp_fail(request, message='请设置作业的完成时间')

    if begin_time < now:
        return jsonp_fail(request, message='定时发布时间不得小于当前系统时间')
    if begin_time >= end_time:
        return jsonp_fail(request, message='定时发布时间不得大于完成时间')

    title = title or "%s试卷" % begin_time.strftime("%m月%d日")

    # 1已发 2待发
    status = 1 if begin_time <= now else 2

    for k, i in enumerate(ids):
        # create task
        task_id = db.tbkt_yingyu.yy_task.create(
            type=102,
            object_id=i,
            add_user=user.id,
            title=title[k],
            sms_content=content,
            status=status,
            add_time=now,
            begin_time=begin_time,
            end_time=end_time,
            is_sendpwd=sendpwd,
        )
        if status == 1:
            get_ticket(user.id)

        # create task_class
        class_details = []
        for unit_id in unit_ids:
            d = {'task_id': task_id, 'unit_class_id': unit_id,
                 'type': sendscope, 'add_time': now, 'student_id': '', 'status':status}
            class_details.append(d)
        db.tbkt_yingyu.yy_task_class.bulk_create(class_details)

        # create task_details
        task_details = []
        questions = PAPER_QUESTION[i]
        # questions.sort()
        questions_array = []
        d = {}
        d['task_id'] = task_id
        d['content_type'] = 10
        for qid in questions:
            questions_array.append({"cid":i, "tcid":i, "qid":qid})
        d['text'] = json.dumps(questions_array)
        task_details.append(d)
        db.tbkt_yingyu.yy_task_detail.bulk_create(task_details)

        pub_ids = []
        questions = PAPER_QUESTION[i]
        for qid in questions:
            d = {}
            d['user_id'] = user.id
            d['subject_id'] = 91
            d['question_id'] = qid
            d['add_time'] = time.time()
            pub_ids.append(d)
        db.tbkt_yingyu.yy_publish_question.bulk_create(pub_ids) #!!!!!!!!!!!!!!!!!!!!!!!!
        create_message(task_id, user.id, title[k], content, begin_time, end_time, type, unit_ids)

    user_phone = db.tbkt_user_slave.auth_user.select('phone').get(id=user.id)
    # send sms or password
    if status == 1 or sendpwd:
        call(send_sms_method, request, unit_ids, status, user_phone, open_content, content, sendpwd)

    data = {}
    return jsonp_ok(request, data)


@ajax_try({})
@need_login
def choice_paper(request):
    """
       @api {post} /huodong/mid_term/yy/choice_paper [期中提分试卷英语]选择试卷
       @apiGroup mid_term
       @apiParamExample {json} 请求示例
          {}
       @apiSuccessExample {json} 成功返回
          {
           "message": "",
           "next": "",
           "data": {
        "book": {
            "press_name": "人教版",
            "name": "小学英语一年级上册",
            "subject_id": 91,
            "grade_id": 1,
            "volume": 1,
            "version_name": "一年级起点",
            "id": 21
        },
        "papers": [             # 没有试卷则papers = []
            {
                "id": 1,
                "pub": 0,
                "name": "一年级卷一"
            },
            {
                "id": 2,
                "pub": 0,
                "name": "一年级卷二"
            },
            {
                "id": 3,
                "pub": 0,
                "name": "一年级卷三"
            },
            {
                "id": 4,
                "pub": 0,
                "name": "二年级卷一"
            },
            {
                "id": 5,
                "pub": 0,
                "name": "二年级卷二"
            }
        ]
    },
           "response": "ok",
           "error": ""
           }
       @apiSuccessExample {json} 失败返回
          {"message": "", "error": "", "data": "", "response": "fail", "next": ""}
       """

    """
    功能说明：                布置试卷， 根据教材得到固定的试卷
    -----------------------------------------------
    修改人                    修改时间
    -----------------------------------------------
    张嘉麒                    2018-4-6
    """
    user = request.user
    nowt = int(time.time())
    mid_book = db.tbkt_active.mid_term_user_book.select('book_id').get(user_id=user.id, subject_id=91)
    if not mid_book:
        book = db.default.user_book.select('book_id').get(user_id=user.id, subject_id=91)
        if book.book_id in (44,300,641,642,126,305,647,648,177,322,998,999):
            db.tbkt_active.mid_term_user_book.create(
                user_id=user.id,
                book_id=book.book_id,
                subject_id=91,
                add_time=nowt,
                is_work_book=0,
            )
        else:
            return jsonp_fail(request, [])
    else:
        book = mid_book
    data = {}
    data['book'] = book.book_id
    papers = []
    try:
        if book and book.book_id in BOOK_PAPER.keys():
            paper_list = BOOK_PAPER[book.book_id]
            #     #     126: [121, 122, 123],# 外研三起点下
            # sql = "SELECT question_id FROM yy_publish_question WHERE user_id = %s AND subject_id = 91" \
            #       " ORDER BY id DESC LIMIT 100;" % user.id
            # pub_papers = db.tbkt_yingyu.fetchall_dict(sql)
            # pub_papers = set([int(pid.question_id) for pid in pub_papers])
            # for paper in paper_list:
            #     row = Struct()
            #     row.id = paper
            #     paper_question = set(PAPER_QUESTION[paper])
            #     if paper_question & pub_papers:
            #         row.pub = 1
            #     else:
            #         row.pub = 0
            #     row.name = PAPER[paper]
            #     papers.append(row)
            sql = '''
                select DISTINCT yt.object_id
                from yy_task yt left join yy_task_class ytc on yt.id = ytc.task_id
                where ytc.status > 0 and yt.add_user = %s and yt.type = 102
            ''' % (user.id)
            pub_papers = db.tbkt_yingyu.fetchall_dict(sql)

            pub_papers = [paper.object_id for paper in pub_papers]
            for paper in paper_list:
                row = Struct()
                row.id = paper
                if paper in pub_papers:
                    row.pub = 1
                else:
                    row.pub = 0
                row.name = PAPER[paper]
                papers.append(row)
    except Exception as e:
        print e, 'choice_paper'
    data['papers'] = papers
    return jsonp_ok(request, data)


@ajax_try({})
@need_login
def preview_paper(request):
    """
           @api {post} /huodong/mid_term/yy/preview_paper [期中提分试卷英语]试卷预览
           @apiGroup mid_term
           @apiParamExample {json} 请求示例
              {"id":1}
           @apiSuccessExample {json} 成功返回
              {
               "message": "",
               "next": "",
                "data": {
                    "question": [
                        {
                        "video_image": "",
                        "asks": [
                            {
                                "video_image": "",
                                "video_url": "",
                                "no": 0,
                                "listen_audio": "",
                                "options": [
                                    {
                                        "option": "A",
                                        "image": "",
                                        "ask_id": 449,
                                        "is_right": 1,
                                        "content": "have",
                                        "link_id": -1,
                                        "id": 1187
                                    },
                                    {
                                        "option": "B",
                                        "image": "",
                                        "ask_id": 449,
                                        "is_right": 0,
                                        "content": "has",
                                        "link_id": -1,
                                        "id": 1188
                                    },
                                    {
                                        "option": "C",
                                        "image": "",
                                        "ask_id": 449,
                                        "is_right": 0,
                                        "content": "is",
                                        "link_id": -1,
                                        "id": 1189
                                    }
                                ],
                                "parse": {
                                    "content": "",
                                    "images": []
                                },
                                "answer": "A",
                                "listen_text": "",
                                "duration": 0,
                                "right_option": {
                                    "option": "A",
                                    "image": "",
                                    "ask_id": 449,
                                    "is_right": 1,
                                    "content": "have",
                                    "link_id": -1,
                                    "id": 1187
                                },
                                "id": 449,
                                "subject": {
                                    "content": "（  ）I＿＿a pencil.",
                                    "images": []
                                }
                            }
                        ],
                        "video_url": "",
                        "ask_no": 0,
                        "num": 1,
                        "type": 1,
                        "id": 418,
                        "classify": 2,
                        "subject": {
                            "content": "选择正确的答案，将其序号填入题前括号里。",
                            "images": []
                        }
                    },{},{}....
                    },
               "response": "ok",
               "error": ""
               }
           @apiSuccessExample {json} 失败返回
              {"message": "", "error": "", "data": "", "response": "fail", "next": ""}
           """

    """
    功能说明：                布置试卷前，试卷的预览
    -----------------------------------------------
    修改人                    修改时间
    -----------------------------------------------
    张嘉麒                    2018-4-6
    """
    context = Struct()
    args = request.loads() or request.QUERY.casts(id=int)
    id = args.id or 0           # 预览的试卷id
    try:
        paper_name = PAPER[id]      # 试卷的名字
        questions = cache.paper_questions.get(id)
        if not questions:
            qid_list = PAPER_QUESTION[id]        # 试卷对应的试题
            # qid_list.sort()

            qid_num = len(qid_list)
            questions = [comyy.get_question_data(qid_list[num], num) for num in range(0, qid_num)]
            # questions.sort(key=lambda x: (x.classify, x.type, x.id))
            # cache.paper_questions.set(id, questions)
        if 101<=id<=158:
            context.paper_name = paper_name
        if 159<=id<=194:
            context.paper_name = u"共20道题"
        context.question = questions
        # context.sheet = common_yy.get_answer_sheet(questions)
    except Exception, e:
        print e, args, 'preview_paper'
    return jsonp_ok(request, context)



@ajax_try({})
@need_login
def stu_paper_detail(request):
    """
       @api {post} /huodong/mid_term/yy/stu_paper_detail [期中提分试卷英语]单个试卷详情
       @apiGroup mid_term
       @apiParamExample {json} 请求示例
            {"test_id":3445,"stu_name":"小菜"}
       @apiSuccessExample {json} 成功返回
          {
           "message": "",
           "next": "",
           "data": {
            "sheet": [
                {
                    "qid": 54,
                    "ask_id": 55,
                    "option_id": 6276,
                    "result": 1,
                    "right_answer": "A",
                    "answer": "A"
                },
                {
                    "qid": 418,
                    "ask_id": 449,
                    "option_id": 6276,
                    "result": 0,
                    "right_answer": "A",
                    "answer": "C"
                },{},{}...
            ],
            "question": [
                {},{},{}....
                ],
            "title": "小菜一年级卷一"
             },
           "response": "ok",
           "error": ""
           }
       @apiSuccessExample {json} 失败返回
          {"message": "", "error": "", "data": "", "response": "fail", "next": ""}
       """

    """
    功能说明：                试卷作业，单个试卷完成情况
    -----------------------------------------------
    修改人                    修改时间
    -----------------------------------------------
    张嘉麒                    2018-4-7
    """
    args = request.loads() or request.QUERY.casts(test_id=int, stu_name=str)
    test_id = args.test_id or 0
    stu_name = args.stu_name or ''
    context = Struct()
    context.title = com_paper.get_paper_title(test_id, stu_name)
    try:
        questions, sheet = comyy.get_task_details(test_id)
        # questions.sort(key=lambda x: (x.classify, x.type, x.id))
        questions = comyy.get_special_user_answer(questions)
        context.question = questions
        context.sheet = comyy.get_answer_sheet_list(test_id, questions)
    except Exception, e:
        print e, args, 'stu_paper_detail'
    return jsonp_ok(request, context)


@ajax_try({})
@need_login
def paper_preview_list(request):
    """
       @api {post} /huodong/mid_term/yy/paper_preview_list [期中提分试卷英语]试卷预览列表
       @apiGroup mid_term
       @apiParamExample {json} 请求示例
            {"task_id":71539}
       @apiSuccessExample {json} 成功返回
          {
           "message": "",
           "next": "",
           "data": {
                "rows": [
                    {
                        "name": "一年级卷一",
                        "paper_id": 1
                    },
                    {
                        "name": "一年级卷二",
                        "paper_id": 2
                    },
                    {
                        "name": "一年级卷三",
                        "paper_id": 3
                    }
                ]
            },
           "response": "ok",
           "error": ""
           }
       @apiSuccessExample {json} 失败返回
          {"message": "", "error": "", "data": "", "response": "fail", "next": ""}
       """

    """
    功能说明：                试卷作业，试卷列表
    -----------------------------------------------
    修改人                    修改时间
    -----------------------------------------------
    张嘉麒                    2018-4-11
    """
    context = Struct()
    args = request.loads() or request.QUERY.casts(task_id=int)
    task_id = int(args.task_id) or 0
    sql = "SELECT text from yy_task_detail WHERE task_id = %s ORDER BY id;" % task_id
    task_datas = db.tbkt_yingyu.fetchall_dict(sql)
    for taskdata in task_datas:
        taskdata['catalog_id'] = json.loads(taskdata['text'])['cid']
    rows = []
    try:
        distinct_array = []
        for task_data in task_datas:
            row = Struct()
            row.paper_id = task_data['catalog_id']
            row.name = PAPER[row.paper_id]
            if row.paper_id not in distinct_array:
                distinct_array.append(row.paper_id)
                rows.append(row)
    except Exception, e:
        print e, args, 'paper_preview_list'
    context.rows = rows
    return jsonp_ok(request, context)


@ajax_try({})
@need_login
def paper_preview_detail(request):
    """
        @api {post} /huodong/mid_term/yy/paper_preview_detail [期中提分试卷英语]单试卷预览详情
        @apiGroup mid_term
        @apiParamExample {json} 请求示例
             {"task_id":71539,"paper_id":1}
        @apiSuccessExample {json} 成功返回
           {
            "message": "",
            "next": "",
            "data": {
                "sheet": [
                    {
                        "qid": 418,
                        "right_answer": "A",
                        "aid": 449
                    },
                    {
                        "qid": 424,
                        "right_answer": "A",
                        "aid": 455
                    },
                    {
                        "qid": 54,
                        "right_answer": "A",
                        "aid": 55
                    }
                ],
                "questions": [{},{},{}...},
                "title": "一年级卷一"
            },
            "response": "ok",
            "error": ""
            }
        @apiSuccessExample {json} 失败返回
           {"message": "", "error": "", "data": "", "response": "fail", "next": ""}
        """

    """
    功能说明：                试卷作业，单试卷预览详情
    -----------------------------------------------
    修改人                    修改时间
    -----------------------------------------------
    张嘉麒                    2018-4-11
    """

    context = Struct()
    args = request.loads() or request.QUERY.casts(task_id=int, paper_id=int)
    paper_id = int(args.paper_id) or 0
    task_id = args.task_id or 0
    context.title = PAPER[paper_id]
    try:
        sql = "SELECT text from yy_task_detail WHERE task_id = %s;" % (task_id)
        task_datas = db.tbkt_yingyu.fetchall_dict(sql)
        for taskdata in task_datas:
            taskdata['question_id'] = json.loads(taskdata['text'])['qid']
        qid_list = [d.question_id for d in task_datas]
        # qid_list.sort()
        qid_num = len(qid_list)
        questions = [comyy.get_question_data(qid_list[num], num) for num in range(0, qid_num)]
        # questions.sort(key=lambda x: (x.classify, x.type, x.id))
        context.questions = questions
        context.sheet = comyy.get_answer_sheet(questions)
    except Exception, e:
        print e, args, 'paper_preview_detail'
    return jsonp_ok(request, context)


@ajax_try({})
@need_login
def do_paper(request):
    """
        @api {post} /huodong/mid_term/yy/s/get_test [期中提分试卷英语]获取试卷内容
        @apiGroup mid_term
        @apiParamExample {json} 请求示例
           {"task_id":71539,"paper_id":2} # 同学生端
        @apiSuccessExample {json} 成功返回
           {
            "message": "",
            "next": "",
             "data": {
                "test": {
                    "id": 3454,
                    "nquestion": 3
                },
                "sheet": [{
                    "ask_id": 389,
                    "option_id": 4576,
                    "result": 1,
                    "answer": "C",
                    "test_id": 3454,
                    "id": 46951,
                    "question_id": 360
                },{},{}....],
                "numbers":[
                     {
                        "qid": 360,
                        "ask_no": 1,
                        "aid": 389
                    },
                    {
                        "qid": 50,
                        "ask_no": 2,
                        "aid": 51
                    },
                    {
                        "qid": 99,
                        "ask_no": 3,
                        "aid": 100
                    }
                ]
            "response": "ok",
            "error": ""
            }
        @apiSuccessExample {json} 失败返回
           {"message": "", "error": "", "data": "", "response": "fail", "next": ""}
        """

    """
    功能说明：                获得试卷的习题
    -----------------------------------------------
    修改人                    修改时间
    -----------------------------------------------
    张帅男                    2017-4-8
    """
    context = Struct()
    user = request.user
    args = request.loads() or request.QUERY.casts(task_id=int, paper_id=int)
    task_id = args.task_id or 0
    paper_id = args.paper_id or 0

    task_id = int(task_id)
    paper_id = int(paper_id)

    # try:
    test = com_paper.get_test(user.id, task_id, paper_id)
    numbers, sheet = com_method.get_test_question_number_sheet(test.id)
    context.test = test
    context.numbers = numbers
    context.sheet = sheet
    # except Exception, e:
    #     print e, args, 'do_paper'
    return jsonp_ok(request, context)


@ajax_try({})
@need_login
def paper_submit(request):
    """
    @api {post} /huodong/mid_term/yy/s/paper_submit [期中提分试卷英语]提交保存习题
    @apiGroup mid_term
    @apiParamExample {json} 请求示例
        {"data":[{"question_id":360,"ask_id":"389","answer":"C","option_id":4576},
                {"question_id":50,"ask_id":"51","answer":"B","option_id":158},
                {"question_id":99,"ask_id":"100","answer":"B","option_id":3809}]
         "status":1                     # 1提交， 2保存
         "test_id": 3454
                }           # 保存内容同学生保存一样
    @apiSuccessExample {json} 成功返回
       {
        "message": "",
        "next": "",
        "data": "",
        "response": "ok",
        "error": ""
        }
    @apiSuccessExample {json} 失败返回
       {"message": "", "error": "", "data": "", "response": "fail", "next": ""}
    """

    """
    功能说明：                提交保存试卷
    -----------------------------------------------
    修改人                    修改时间
    -----------------------------------------------
    张帅男                    2017-4-7
    """
    args = request.loads() or request.QUERY.casts(status=int, data='json', test_id=int)
    user_id = request.user_id
    test_id = int(args.test_id)
    if int(args.status) not in (1, 2):
        return jsonp_fail(request, u'wrong status: %s' % args.status)
    if not args.data:
        return jsonp_fail(request, u'no_data')
    if type(args.data) != list:
        args.data = json.loads(args.data)

    try:
        com_method.test_submit_now(int(test_id), args.status, args.data)
        sql = """select object_id, catalog_id  from yy_test where id=%s """ % (int(test_id))
        test = db.tbkt_yingyu.fetchone_dict(sql)
        com_paper.update_progress(user_id, int(test.object_id))
        com_paper.update_progress(user_id, int(test.object_id))
    except Exception, e:
        print e, args, 'paper_submit'
    return jsonp_ok(request, )


def create_message(task_id, user_id, title, content, begin_time, end_time, task_type, unit_ids):
    """
    创建 tbkt_com.messages
    :param task_id:  sx_task_id -> message object_Id
    :param user_id:
    :param title:    作业标题
    :param content:  短信内容
    :param begin_time:  作业开始时间
    :param end_time:  作业结束时间
    :param task_type: 作业类型 1：普通作业,2：试卷作业 , 4：知识点视频作业, 5：速算作业
    :param unit_ids:  班级id集合
    :return:
    """
    with db.default as dd:
        msg_id = dd.message.create(
            type=102,
            subject_id=91,
            object_id=task_id,
            add_user=user_id,
            title=title,
            content=content,
            status=1,
            add_time=int(time.time()),
            begin_time=begin_time,
            end_time=end_time
        )
        msg_class = []
        for i in unit_ids:
            d = {'message_id': msg_id, 'unit_class_id': i, 'student_ids': ''}
            msg_class.append(d)
        dd.message_class.bulk_create(msg_class)


def send_sms_method(request, unit_ids, status, user_phone, open_content, content, sendpwd):
    students = []
    for unit_id in unit_ids:
        students += get_unit_students(request, unit_id)
        # send sms

    open_ids = ','.join(str(s.id) for s in students if s.is_open == 1)
    not_open_ids = ','.join(str(s.id) for s in students if not s.is_open)
    send_sms_user_id(request, not_open_ids, content)
    send_sms_user_id(request, open_ids, open_content)

    # send password
    if sendpwd:
        bind_ids = [s.bind_id for s in students]
        usercom.batch_send_password(bind_ids, sender={'send_phone': user_phone.phone})
    # send im
    user_ids = [s.id for s in students]